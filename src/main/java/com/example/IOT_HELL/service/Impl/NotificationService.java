package com.example.IOT_HELL.service.Impl;

import com.example.IOT_HELL.payload.request.NotificationRequest2;
import com.google.cloud.firestore.DocumentReference;
import com.google.cloud.firestore.DocumentSnapshot;
import com.google.cloud.firestore.Firestore;
import com.google.firebase.database.*;
import lombok.RequiredArgsConstructor;
import org.springframework.messaging.simp.SimpMessageSendingOperations;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

@Service
@RequiredArgsConstructor
public class NotificationService {

    private final Firestore firestore;
    private final FirebaseDatabase firebaseDatabase;
    private final SimpMessageSendingOperations messagingTemplate;

    public CompletableFuture<Map<String, Object>> getForestStatus() {
        CompletableFuture<Map<String, Object>> future = new CompletableFuture<>();
        DatabaseReference ref = firebaseDatabase.getReference("/");

        ref.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot snapshot) {
                Map<String, Object> response = new HashMap<>();

                for (DataSnapshot child : snapshot.getChildren()) {
                    String rawValue = child.child("value").getValue(String.class);
                    String timestamp = child.child("timestamp").getValue(String.class);

                    if (rawValue != null && rawValue.length() == 3) {
                        String boardId = rawValue.substring(0, 1);
                        String statusCode = rawValue.substring(1, 3);

                        try {
                            Map<String, Object> boardData = getBoardData(boardId);
                            if (boardData != null) {
                                boardData.put("status", getStatusMessage(statusCode));
                                boardData.put("timestamp", Objects.requireNonNullElse(timestamp, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤"));
                                response.put(boardId, boardData);

                                // üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
                                if ("3".equals(statusCode) || "5".equals(statusCode)) {
                                    sendAlertNotification(boardId, boardData.get("status").toString(), boardData);
                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
                future.complete(response);
            }

            @Override
            public void onCancelled(DatabaseError error) {
                future.completeExceptionally(error.toException());
            }
        });

        return future;
    }

    private Map<String, Object> getBoardData(String boardId) throws ExecutionException, InterruptedException {
        DocumentReference docRef = firestore.collection("forest").document(boardId);
        DocumentSnapshot docSnapshot = docRef.get().get();
        return docSnapshot.exists() ? docSnapshot.getData() : new HashMap<>(); // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null
    }

    private String getStatusMessage(String statusCode) {
        switch (statusCode) {
            case "0": return "‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏õ‡∏Å‡∏ï‡∏¥";
            case "1": return "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á";
            case "2": return "‡∏°‡∏µ‡πÅ‡∏£‡∏á‡∏™‡∏±‡πà‡∏ô";
            case "3": return "‡∏°‡∏µ‡πÅ‡∏£‡∏á‡∏™‡∏±‡πà‡∏ô‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥";
            case "4": return "‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏±‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥";
            case "5": return "‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏î‡∏ô‡∏ï‡∏±‡∏î!";
            default: return "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞";
        }
    }

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô WebSocket
    private void sendWebSocketNotification(String message) {
        messagingTemplate.convertAndSend("/topic/alerts", message);
    }

    public void sendAlertNotification(String boardId, String status, Map<String, Object> data) {
        String message = String.format(
                "üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô!\n‡∏ö‡∏≠‡∏£‡πå‡∏î ID: %s\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: %s\n‡∏û‡∏¥‡∏Å‡∏±‡∏î: %s, %s\n‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: %s",
                boardId,
                status,
                Objects.requireNonNullElse(data.get("latitude"), "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"),
                Objects.requireNonNullElse(data.get("longitude"), "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"),
                Objects.requireNonNullElse(data.get("timestamp"), "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        );

        // ‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô WebSocket
        sendWebSocketNotification(message);

        // ‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Expo Push Notification (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ)
        NotificationRequest2 request = new NotificationRequest2(
                getExpoPushToken(boardId),  // ‡∏£‡∏±‡∏ö Token ‡∏ï‡∏≤‡∏° boardId
                "üå≤ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö!",
                message
        );
        sendPushNotification(request);
    }

    public void sendPushNotification(NotificationRequest2 request) {
        // ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏á Push Notification ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Expo (Implement API Call ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà)
    }

    private String getExpoPushToken(String boardId) {
        // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Expo Push Token ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° Board ID (‡πÉ‡∏ä‡πâ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠ Config)
        return "<ExpoPushToken>";  // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á Token ‡∏à‡∏£‡∏¥‡∏á
    }
}
